1.)git log will show all he commits.
2.)git diff will tell the number of lined added and subtracted from the file after every commit.
3.)git reset --hard is used to discard any changes in the working directory or staging area.
4.)git branch ..... will make a branch with a name with ..... .
5.)git add ...... will ad ..... to the staging area.
6.)git show"commit id"-will show the difference of the commit with its parent id.
7.)git merge master "branch name"-will merge the branch with the master.
8.)git branch -d "branch name"-will delete the branch.
9.)git merge will also include the currently checked-out branch in the merged version. So if you have branch1
   checked out, and you run git merge branch2 branch3, the merged version will combine branch1 as well as branch2
   and branch3. That’s because the branch1 label will update after you make the merge commit, so it’s unlikely
   that you didn’t want the changes from branch1 included in the merge. For this reason, you should always 
   checkout one of the two branches you’re planning on merging before doing the merge. Which one you should check 
   out depends on which branch label you want to point to the new commit.
   Since the checked-out branch is always included in the merge, you may have guessed that when you are merging
   two branches, you don't need to specify both of them as arguments to git merge on the command line. If you want
   to merge branch2 into branch1, you can simply git checkout branch1 and then type git merge branch2. The only
   reason to type git merge branch1 branch2 is if it helps you keep better mental track of which branches you are
   merging.
   Also, since the two branches are merged, the order in which they are typed into the command line does not 
   matter. The key is to remember that git merge always merges all the specified branches into the currently 
   checked out branch, creating a new commit for that branch.